{"version":3,"sources":["utils/API.js","components/employeeCard.js","App.js","reportWebVitals.js","index.js"],"names":["axios","get","EmployeeCard","state","person","personData","a","API","data","this","setState","results","console","log","Jumbotron","Container","Row","Col","Button","onClick","gender","filter","employee","className","age","concat","sort","employee_a","employee_b","registered","map","employees","Card","style","width","Img","variant","src","picture","large","Body","Title","name","first","last","Text","email","phone","login","uuid","Component","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4VAGe,EACQ,WACf,OAAOA,IAAMC,IAAI,iD,OCqFVC,E,4MArFbC,MAAQ,CACNC,OAAQ,GACRC,WAAY,I,8FAGd,8BAAAC,EAAA,sEACyBC,IADzB,gBACUC,EADV,EACUA,KACRC,KAAKC,SAAS,CACZN,OAAQI,EAAKG,QACbN,WAAYG,EAAKG,UAEnBC,QAAQC,IAAIL,GANd,gD,0EASA,WAAU,IAAD,OACCJ,EAAWK,KAAKN,MAAhBC,OACAC,EAAeI,KAAKN,MAApBE,WAqBR,OACE,gCACI,cAACS,EAAA,EAAD,UACI,sDAEJ,cAACC,EAAA,EAAD,UACF,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QA3BK,WACnB,IAAMC,EAAShB,EAAOiB,QAAO,SAACC,GAAD,MAAkC,SAApBA,EAASF,UACpD,EAAKV,SAAS,CAAEN,OAAQgB,KAyBaG,UAAU,MAAzC,wCAIF,cAACN,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QA3BA,WACd,IAAMK,EAAM,GACTC,OAAOrB,GACPsB,MACC,SAACC,EAAYC,GAAb,OACED,EAAWE,WAAWL,IAAMI,EAAWC,WAAWL,OAExD,EAAKd,SAAS,CAAEN,OAAQoB,KAoBQD,UAAU,MAApC,0DAIF,cAACN,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,QAtBF,WACZ,EAAKT,SAAS,CAAEN,OAAQC,KAqBMkB,UAAU,MAAlC,0BAOJ,cAACP,EAAA,EAAD,UACGP,KAAKN,MAAMC,OAAO0B,KAAI,SAACC,GAAD,OACrB,eAACC,EAAA,EAAD,CAEEC,MAAO,CAAEC,MAAO,SAChBX,UAAU,MAHZ,UAKE,cAACS,EAAA,EAAKG,IAAN,CAAUC,QAAQ,MAAMC,IAAKN,EAAUO,QAAQC,QAC/C,eAACP,EAAA,EAAKQ,KAAN,WACE,eAACR,EAAA,EAAKS,MAAN,WACGV,EAAUW,KAAKC,MADlB,IAC0BZ,EAAUW,KAAKE,QAEzC,cAACZ,EAAA,EAAKa,KAAN,UAAYd,EAAUe,QACtB,cAACd,EAAA,EAAKa,KAAN,UAAYd,EAAUgB,aAVnBhB,EAAUiB,MAAMC,kB,GAlERC,aCSZC,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,MCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2d182807.chunk.js","sourcesContent":["import axios from 'axios'\n\n// eslint-disable-next-line import/no-anonymous-default-export\nexport default {\n    getRandomEmployee: function () {\n        return axios.get(\"https://randomuser.me/api/?results=20&nat=us\")\n    }\n}","import React, { Component } from \"react\";\nimport { Card, Col, Row, Button, Jumbotron, Container } from \"react-bootstrap\";\nimport API from \"../utils/API\";\n\nclass EmployeeCard extends Component {\n  state = {\n    person: [],\n    personData: [],\n  };\n\n  async componentDidMount() {\n    const { data } = await API.getRandomEmployee();\n    this.setState({\n      person: data.results,\n      personData: data.results,\n    });\n    console.log(data);\n  }\n\n  render() {\n    const { person } = this.state;\n    const { personData } = this.state;\n    // console.log(person);\n    const filterGender = () => {\n      const gender = person.filter((employee) => employee.gender === \"male\");\n      this.setState({ person: gender });\n    };\n\n    const sortAge = () => {\n      const age = []\n        .concat(person)\n        .sort(\n          (employee_a, employee_b) =>\n            employee_a.registered.age - employee_b.registered.age\n        );\n      this.setState({ person: age });\n    };\n\n    const reset = () => {\n      this.setState({ person: personData });\n    };\n\n    return (\n      <div>\n          <Jumbotron>\n              <h1>Employee Directory</h1>\n          </Jumbotron>\n          <Container>\n        <Row>\n          <Col>\n            <Button onClick={filterGender} className=\"m-1\">\n              Filter: Show 'male' only\n            </Button>\n          </Col>\n          <Col>\n            <Button onClick={sortAge} className=\"m-1\">\n              Sort: Youngest registration date to oldest\n            </Button>\n          </Col>\n          <Col>\n            <Button onClick={reset} className=\"m-1\">\n              Reset\n            </Button>\n          </Col>\n        </Row>\n        </Container>\n\n        <Row>\n          {this.state.person.map((employees) => (\n            <Card\n              key={employees.login.uuid}\n              style={{ width: \"10rem\" }}\n              className=\"m-4\"\n            >\n              <Card.Img variant=\"top\" src={employees.picture.large} />\n              <Card.Body>\n                <Card.Title>\n                  {employees.name.first} {employees.name.last}\n                </Card.Title>\n                <Card.Text>{employees.email}</Card.Text>\n                <Card.Text>{employees.phone}</Card.Text>\n              </Card.Body>\n            </Card>\n          ))}\n        </Row>\n      </div>\n    );\n  }\n}\n\nexport default EmployeeCard;\n","\nimport './App.css';\nimport EmployeeCard from './components/employeeCard'\n\n\nfunction App() {\n  return (\n    <div>\n      <EmployeeCard />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}